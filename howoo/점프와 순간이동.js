// n에서 1로 역추적

// 5000, 2로 나눠짐, 베터리 소모 없음
// 2500, 2로 나눠짐, 베터리 소모 없음
// 1250, 2로 나눠짐, 베터리 소모 없음
// 625, 2로 나눠짐, 베터리 소모 없음
// 624, 2로 나눠지지 않음 베터리 1소모하여 한칸 이동
// 312, 2로 나눠짐, 베터리 소모 없음
// 156, 2로 나눠짐, 베터리 소모 없음
// 78, 2로 나눠짐, 베터리 소모 없음
// 39, 2로 나눠지지 않음 베터리 1소모하여 한칸 이동
// 38, 2로 나눠짐, 베터리 소모 없음
// 19, 2로 나눠지지 않음 베터리 1소모하여 한칸 이동
// 18, 2로 나눠짐, 베터리 소모 없음
// 9, 2로 나눠지지 않음 베터리 1소모하여 한칸 이동
// 8, 2로 나눠짐, 베터리 소모 없음
// 4, 2로 나눠짐, 베터리 소모 없음
// 2, 2로 나눠지나 1에서 2가려면 베터리 1소모하여 한칸 이동
// 1, 2로 이동하려면 한칸이동

// 한칸 이동하는 경우 카운트를 증가시키면된다.

function solution(n) {
  let batteryCount = 0;
  // 결국 1이 되므로 1이 아닌 순간까지 반복
  while (n !== 1) {
    // 짝수인경우 n을 2로 나눔
    if (n % 2 === 0) {
      n = n / 2;

      // 홀수인경우 1을 빼고 카운트 1증가
    } else {
      n = n - 1;
      batteryCount++;
    }
  }

  // 1에서 2이동하는 경우 베터리를 소모하기 때문에 베터리카운트에 1을 추가
  return batteryCount + 1;
}
